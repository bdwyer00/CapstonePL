# Capstone Project Lab (Spectral Audio Analysis)

#imports
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
from scipy.io import wavfile
from scipy import signal
from matplotlib import style
from scipy.signal import periodogram as periodogram_f
from scipy.fft import fftfreq, fftshift
from scipy.fft import fft, ifft, fft2, ifft2
from matplotlib import style

#Convert wav file into an array

Sample = ('C:/Users/julia/OneDrive/Desktop/classes/CapstonePL/audio/workingPJ.wav')
rate, data = sp.io.wavfile.read(Sample)
data=data[:]
time = np.arange(0, len(data), 1)/rate




periodogram = np.abs(fft(data))**2 / (rate * len(data))
frequencies = fftfreq(len(data), d=1/rate)


style.use('bmh')
fig, (ax1, ax2, ax3) = plt.subplots(1,3)
fig.suptitle('Spectral Analysis', fontsize=16)
ax1.plot(data)
ax1.set_title('Audio Amplitude')
ax1.set_xlabel('Samples')
ax1.set_ylabel('Signal Amplitude')

ax2.plot(fftshift(frequencies), fftshift(periodogram), color='r')
ax2.set_xlim(3,6000) 
ax2.set_title('Power Spectral Density')
ax2.set_ylim(bottom=1e-5, top=1e12)
ax2.set_xlabel('Frequencies [Hz]')
ax2.set_ylabel('$\hat{S}^{p}(f)$')
ax2.set_yscale("log")
ax2.semilogy()
#maxPSD = max(fftshift(periodogram))
#ax2.annotate(
#    maxPSD,
#    xy=(4., 1), xycoords='data',
#    xytext=(30, 30), textcoords='offset points',
#    bbox=dict(boxstyle="round", fc="0.8"),
#)

ax3.plot
Freq = np.fft.fft(data)
ax3.plot(Freq)
ax3.set_title('Fast Fourier Transform')
ax3.set_xlim(0,8000)
ax3.set_ylim(bottom=1e2, top=1e5)
ax3.set_yscale('log')
ax3.set_xlabel('Frequency [Hz]')
#plot sound amplitude



plt.figure(figsize=(20,4))
plt.plot(data)
plt.show()


#Spectral density graph

periodogram = np.abs(fft(data))**2 / (rate * len(data))
frequencies = fftfreq(len(data), d=1/rate)

plt.figure(figsize=(8,4))
plt.plot(fftshift(frequencies), fftshift(periodogram), color='r')
plt.xlim(0,10000) 
plt.ylim(bottom=1e-5, top=1e12)
plt.xlabel('Frequencies [Hz]')
plt.ylabel('$\hat{S}^{p}(f)$')
plt.yscale("log")
plt.semilogy()
plt.show()


#perform fft

Freq = np.fft.fft(data)
plt.plot(Freq)
plt.xlim(0,6000)
plt.ylim(bottom=1e0, top=1e7)
plt.yscale("log")
plt.xlabel('Frequency [Hz]')
plt.show()

# Data 
